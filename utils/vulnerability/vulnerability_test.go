package vulnerability

import "testing"

func TestValidateSeverity(t *testing.T) {
	type args struct {
		severity string
	}
	tests := []struct {
		name    string
		args    args
		wantErr bool
	}{
		{
			name: "DEFCON1",
			args: args{
				severity: "DEFCON1",
			},
			wantErr: false,
		},
		{
			name: "CRITICAL",
			args: args{
				severity: "CRITICAL",
			},
			wantErr: false,
		},
		{
			name: "HIGH",
			args: args{
				severity: "HIGH",
			},
			wantErr: false,
		},
		{
			name: "MEDIUM",
			args: args{
				severity: "MEDIUM",
			},
			wantErr: false,
		},
		{
			name: "LOW",
			args: args{
				severity: "LOW",
			},
			wantErr: false,
		},
		{
			name: "NEGLIGIBLE",
			args: args{
				severity: "NEGLIGIBLE",
			},
			wantErr: false,
		},
		{
			name: "UNKNOWN",
			args: args{
				severity: "UNKNOWN",
			},
			wantErr: false,
		},
		{
			name: "Unknown to upper",
			args: args{
				severity: "Unknown",
			},
			wantErr: false,
		},
		{
			name: "invalid",
			args: args{
				severity: "invalid",
			},
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if err := ValidateSeverity(tt.args.severity); (err != nil) != tt.wantErr {
				t.Errorf("ValidateSeverity() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}
